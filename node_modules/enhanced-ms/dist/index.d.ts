declare const _default: {
	ns: number;
	us: number;
	ms: number;
	s: number;
	m: number;
	h: number;
	d: number;
	w: number;
	mo: number;
	y: number;
	dec: number;
	c: number;
	kyr: number;
};
declare const languages: {
	en: Language;
	mi: Language;
	de: Language;
};
declare function (input: number, options?: StringifyOptions, language?: LanguageOptions): string | null;
declare function (input: string, _options?: NumberifyOptions, language?: LanguageOptions): any;
declare function ms(value1: LanguageKey): typeof ms;
declare function ms(value1: Options): typeof ms;
declare function ms(value1: number, value2?: LanguageKey | Options, value3?: Options): ReturnType<typeof stringify>;
declare function ms(value1: string, value2?: LanguageKey | Options, value3?: Options): ReturnType<typeof numberify>;
export declare type LanguageKey = keyof typeof languages;
export declare type Options = StringifyOptions & NumberifyOptions;
export interface Language {
	/** The decimal separator this language uses */
	decimal: "." | ",";
	/** The version of 'and' in this language */
	and: string;
	/** Measurement units */
	units: Unit[];
}
export interface NumberifyOptions {
}
export interface StringifyOptions {
	/** Include milliseconds in the output */
	includeMs?: boolean;
	/** Include sub milliseconds in the output */
	includeSubMs?: boolean;
	/** Use the short names of measurements */
	shortFormat?: boolean;
	/** Round the result to the highest unit */
	roundUp?: boolean;
}
export interface Unit {
	/** Key to identify this unit */
	key: keyof typeof measurements;
	/** Long form of the measurement */
	name: string | ((count: number) => string);
	/** Short form of the measurement */
	abbreviation?: string | ((count: number) => string);
	/** Strings used for the string regex */
	matches: string[];
}
export {
	ms as default,
};